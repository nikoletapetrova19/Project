package sk.itsovy.petrova.project;

import java.util.Random;

public class MyArray implements ArrayMethods {

    private  int[] arr;
    private  int size;

    public MyArray(int size) {
        if (size <= 0)
            error("Cannot declare array of size:" + size);
        this.size = size;
        arr = new int[size];
        resetArrayToZero();
    }

    public int getSize() {
        return size;
    }


    private void resetArrayToZero() {
        for (int i = 0; i < size; i++)
            arr[i] = 0;
    }

    public MyArray(int[] input) {
        if (input == null || input.length == 0) {
            error("Cannot declare");
        }
        this.arr = input;
        this.size = input.length;
    }

    public double getAverageValue() {
        int sum = 0;
        for (int value : arr)
            sum += value;
        return (double) sum / size;
    }

    @Override
    public int min() {
        int min = arr[0];
        for (int i = 1; i < size; i++) {
            if (min > arr[i]) {
                min = arr[i];
            }
            return min;
        }
        return min;
    }


    @Override
    public int max() {
        int max = arr[0];
        for (int number : arr) {
            if (max < number) {
                max = number;
            }
        }
        return max;
    }

    @Override
    public int min2() {
        error("Not supported method: min2()");
        return 0;
    }

    private void error(String message) {
        System.out.println(message);
        System.out.println("Application will terminate!");
        System.exit(1);
    }

    @Override
    public int max2() {
        error("Not supported method: max2()");
        return 0;
    }

    @Override
    public void generateValues(int a, int b) {
        if(a>b){
            System.exit(1);
        }
        else{
            Random rnd=new Random();
            for(int i=0; i<size; i++){
                int r=(rnd.nextInt(a+1)+b/2);
                arr[i]=r;
            }
        }


    }
    @Override
    public boolean contains(int value) {
        if (size == value) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int countOfValues(int value) {
        int sum = 0;
        for (int i = 0; i < size; i++) {
            if (arr[i] == value) {
                sum++;
            }
        }
        return sum;
    }

    @Override
    public int countOfEvenValues() {
       int sum=0;
       for(int i=0; i<size;i++){
           if(arr[i]%2==0){
               sum++;
           }
           if(arr[i]==0 || arr[i]<0){
               sum++;
           }
       }
       return sum;
    }

   @Override
    public void incrementValues() {
        for (int i = 0; i < arr.length; i++) {
            arr[i] +=  1 ;
        }
    }

    @Override
    public void sort(boolean asc) {
        if (asc){
            for (int i=0; i<(size)-1; i++){
                for (int j=0; j<(size)-i-1; j++){
                    if (arr[j]>arr[j+1]){
                        int temp=arr[j];
                        arr[j]=arr[j+1];
                        arr[j+1]=temp;
                    }
                }
            }
        }else{
            for (int i=0; i<(size)-1; i++){
                for (int j=0; j<(size)-i-1; j++){
                    if (arr[j]<arr[j+1]){
                        int temp=arr[j];
                        arr[j]=arr[j+1];
                        arr[j+1]=temp;
                    }
                }
            }
        }
    }

    @Override
    public void addItem(int newValue) {
        int[] newarr;
        int a= arr.length;
        a++;
        newarr=new int[a];
        int[]arr=newarr;
        for(int g=0; g<a; g++){
            newarr[g]=arr[g];
        }

        newarr[a-1] = newValue;
        System.arraycopy(newarr,0,arr,0,a);
    }

    @Override
    public void addItem(int newValue, int position) {
        int[] array=new int[size+1];
        int temp=0;
        for (int i=0; i<size+1; i++){
            if (position==i+1) {
                array[i] = newValue;
                temp++;
            }
            else
                array[i]=arr[i-temp];
        }
        for (int i=0; i<array.length; i++){
            System.out.print(array[i]+" ");
        }

    }

    @Override
    public int[] copy() {
        return arr.clone();
    }

    @Override
    public int getItem(int position) {
        return arr[position];
    }
    
    public void reverse(){
        for(int i=0; i<size/2;i++) {
            int temp = arr[i];
            arr[i] = arr[size - 1 - i];
            arr[size - 1 - i] = temp;
        }
        }

        public void randomize(){
         Random rnd=new Random();
         for(int i=0;i<2*size;i++){
            int index1=rnd.nextInt(size);
            int index2=rnd.nextInt(size);
            int temp=arr[index1];
            arr[index1]=arr[index2];
            arr[index2]=temp;
        }
        }


}
